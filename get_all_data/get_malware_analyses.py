import csv
import argparse

from pytx import Malware
from pytx import utils
from pytx.vocabulary import Malware as MA

from datetime import datetime

def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-T", "--sample_type", help="The type of malware sample \
        for which to search")
    parser.add_argument("-H", "--share_level", help="The TLP Share Level \
        to match")
    parser.add_argument("-t", "--text", help="The text to match against")
    parser.add_argument("-s", "--status", help="The status (StatusType) \
        to match")
    parser.add_argument("-S", "--strict_text", help="Search results will \
        only match strict text (without wildcards)", action="store_true")
    parser.add_argument("-e", "--end_date", help="Search for samples \
        created up until a date (inclusive). The default is today's date. \
        Note that this date is converted to UTC time, so for example entering \
        1-27-16 would search until 1-27-16 00:00:00 UTC.",
        type=str, default=str(datetime.utcnow()))
    parser.add_argument("-d", "--days_back", help="Number of days prior to the \
        end_date from which results will be pulled.", type=int, default=1)
    # Asking for full samples of malware may break ThreatExchange
    parser.add_argument("-F", "--full_sample", help="If set, will try to fetch \
        the sample and sample_size from ThreatExchange.", action='store_true')
    return parser.parse_args()

def main():
    s = get_args()
    format_ = '%d-%m-%Y'
    for day_counter in range(s.days_back):
        until_param, until_param_string, since_param, since_param_string = \
            utils.get_time_params(s.end_date, day_counter, format_)

        output_file = 'malware_analyses_' + since_param_string + '_to_' + \
            until_param_string + '.csv'
        with open(output_file,'wb') as fout:
            writer = csv.writer(fout)

            # TODO: Remove this once querying the fields related to a sample
            # Doesn't break TX, and fix all the things below
            fields = Malware._default_fields
            if (s.full_sample):
                fields += ['sample_size', 'sample']

            results = Malware.objects(
                fields=fields,
                limit=1000,
                sample_type=s.sample_type,
                share_level=s.share_level,
                text=s.text,
                status=s.status,
                strict_text=s.strict_text,
                since=since_param_string,
                until=until_param_string,
            )

            fields_list = [
                MA.ID,
                MA.ADDED_ON,
                MA.CRX,
                MA.IMPHASH,
                MA.MD5,
                MA.PASSWORD,
                MA.PE_RICH_HEADER,
                MA.SAMPLE_TYPE,
                MA.SAMPLE_SIZE_COMPRESSED,
                MA.SHA1,
                MA.SHA256,
                MA.SHARE_LEVEL,
                MA.SSDEEP,
                MA.STATUS,
                MA.SUBMITTER_COUNT,
                MA.VICTIM_COUNT,
                MA.XPI,
            ]

            if (s.full_sample):
                fields_list += [
                    MA.SAMPLE,
                    MA.SAMPLE_SIZE,
                ]

            # Headers
            writer.writerow(map(utils.convert_to_header,fields_list))
            for result in results:
                writer.writerow(
                    map(lambda x: utils.get_data_field(x, result), fields_list)
                )

if __name__ == "__main__":
    main()
